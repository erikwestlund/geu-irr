---
title: "Dedoose IRR Analysis - Simplified Version"
author: "GEU Research Team"
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    toc-depth: 2
    code-fold: true
    code-tools: true
    embed-resources: true
    self-contained: true
execute:
  warning: false
  message: false
---

```{r setup}
#| label: load-packages

# Check and install required packages if needed
required_packages <- c("dplyr", "tidyr", "stringr", "readxl", "janitor", 
                       "knitr", "kableExtra", "writexl")
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]

if(length(new_packages) > 0) {
  install.packages(new_packages, dependencies = TRUE, repos = "https://cran.rstudio.com/", quiet = TRUE)
}

# Load libraries
library(dplyr)
library(tidyr)
library(stringr)
library(readxl)
library(janitor)
library(knitr)
library(kableExtra)
library(writexl)

# For RStudio/VS Code integration
if (exists("vsc.attach", mode = "function")) {
  vsc.attach()
} else if (requireNamespace("httpgd", quietly = TRUE)) {
  httpgd::hgd()
}

options(scipen = 999)
```


## Data Import

```{r load-data}
#| label: import-data

# Read data file
data_file <- "data/2025_8_25_1115_PT05MMFCP_LIMA_ICR Reformat.xlsx"

if (file.exists(data_file)) {
  df_raw <- readxl::read_excel(data_file)
  
  # Add source row numbers BEFORE any cleaning
  df_raw$source_row_num <- seq_len(nrow(df_raw))
  
  # Now clean names
  df <- df_raw |>
    janitor::clean_names()
    
} else {
  stop("Data file not found. Please check the path.")
}

# Display structure
cat("Data dimensions:", nrow(df), "rows x", ncol(df), "columns\n")
cat("\nColumn names:", paste(names(df), collapse = ", "), "\n")

# Show first few rows
df |>
  select(source_row_num, media_title, excerpt_range, excerpt_creator, codes_applied_combined) |>
  head() |>
  knitr::kable(caption = "Sample of raw data with row numbers") |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
```

## Step 1: Prepare Data and Identify Coders

```{r prepare-data}
#| label: step1-prepare

# Convert key columns to character
df1 <- df |>
  mutate(
    excerpt_range = as.character(excerpt_range),  # Keep full range (e.g., "1023-1050")
    codes_applied_combined = as.character(codes_applied_combined),
    excerpt_creator = as.character(excerpt_creator),
    excerpt_copy = as.character(excerpt_copy)
  )

# Identify unique coders
all_coders <- unique(df1$excerpt_creator)
cat("Coders found in data:", paste(all_coders, collapse = ", "), "\n")

# Select two coders to compare (using actual names)
if (length(all_coders) >= 2) {
  coder1_name <- all_coders[1]
  coder2_name <- all_coders[2]
} else {
  stop("Need at least 2 coders in the data")
}

cat("\nComparing:", coder1_name, "vs", coder2_name, "\n")

# Filter to just these two coders
df_filtered <- df1 |>
  filter(excerpt_creator %in% c(coder1_name, coder2_name))

# Get coder-specific statistics
coder_stats <- df_filtered |>
  group_by(excerpt_creator) |>
  summarise(
    excerpts_coded = n(),
    unique_excerpts = n_distinct(excerpt_range),
    unique_codes = n_distinct(str_split(codes_applied_combined, ",\\s*") |> unlist()),
    .groups = "drop"
  )

# Show sample with full ranges
df_filtered |>
  select(source_row_num, excerpt_range, excerpt_creator, codes_applied_combined) |>
  head() |>
  knitr::kable(caption = "Data with full excerpt ranges") |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
```

### Coder Statistics

```{r coder-stats}
#| label: coder-stats

# Get coder-specific statistics
coder_stats <- df_filtered |>
  group_by(excerpt_creator) |>
  summarise(
    excerpts_coded = n(),
    unique_excerpts = n_distinct(excerpt_range),
    unique_codes = n_distinct(str_split(codes_applied_combined, ",\\s*") |> unlist()),
    .groups = "drop"
  )

coder_stats |>
  knitr::kable(caption = "Individual Coder Summary") |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))

# Get code frequency by coder
code_by_coder <- df_filtered |>
  separate_rows(codes_applied_combined, sep = ",\\s*") |>
  mutate(codes_applied_combined = trimws(codes_applied_combined)) |>
  # Filter out NA, empty strings, and "NA" as text
  filter(!is.na(codes_applied_combined), 
         codes_applied_combined != "", 
         codes_applied_combined != "NA", 
         codes_applied_combined != "na") |>
  group_by(excerpt_creator, codes_applied_combined) |>
  summarise(count = n(), .groups = "drop") |>
  pivot_wider(names_from = excerpt_creator, values_from = count, values_fill = 0) |>
  mutate(total = !!sym(coder1_name) + !!sym(coder2_name)) |>
  arrange(desc(total))

# Display all codes (scrollable if many)
code_by_coder |>
  knitr::kable(caption = "All Codes by Coder (Complete List)") |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover")) |>
  kableExtra::scroll_box(width = "100%", height = "400px")

# Summary of code usage
code_usage_summary <- data.frame(
  Metric = c(
    "Total unique codes",
    paste0("Codes used by ", coder1_name, " only"),
    paste0("Codes used by ", coder2_name, " only"),
    "Codes used by both coders"
  ),
  Count = c(
    nrow(code_by_coder),
    sum(code_by_coder[[coder1_name]] > 0 & code_by_coder[[coder2_name]] == 0),
    sum(code_by_coder[[coder1_name]] == 0 & code_by_coder[[coder2_name]] > 0),
    sum(code_by_coder[[coder1_name]] > 0 & code_by_coder[[coder2_name]] > 0)
  )
)

code_usage_summary |>
  knitr::kable(caption = "Code Usage Summary") |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
```

## Step 2: Split Codes and Create Union

```{r split-codes}
#| label: step2-split

# Split codes into separate rows
df_split <- df_filtered |>
  separate_rows(codes_applied_combined, sep = ",\\s*") |>
  mutate(codes_applied_combined = trimws(codes_applied_combined)) |>
  rename(code = codes_applied_combined) |>
  # Filter out NA, empty strings, and "NA" as text
  filter(!is.na(code), code != "", code != "NA", code != "na")

# Get all unique excerpt-code combinations across both coders
all_excerpt_codes <- df_split |>
  select(media_title, excerpt_range, excerpt_copy, code) |>
  distinct() |>
  arrange(media_title, excerpt_range, code)

cat("Total unique excerpt-code combinations:", nrow(all_excerpt_codes), "\n")

# Show example of an excerpt with multiple codes
example_excerpt <- df_split |>
  filter(excerpt_range == df_split$excerpt_range[1]) |>
  select(excerpt_range, excerpt_creator, code) |>
  arrange(code)

if (nrow(example_excerpt) > 0) {
  example_excerpt |>
    knitr::kable(caption = "Example: All codes for one excerpt from both coders") |>
    kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
}
```

## Step 3: Build Comparison Matrix

```{r build-matrix}
#| label: step3-matrix

# Get source row numbers for each coder separately
coder1_source_rows <- df_filtered |>
  filter(excerpt_creator == coder1_name) |>
  select(media_title, excerpt_range, source_row_num) |>
  distinct() |>
  rename(!!paste0("source_row_", coder1_name) := source_row_num)

coder2_source_rows <- df_filtered |>
  filter(excerpt_creator == coder2_name) |>
  select(media_title, excerpt_range, source_row_num) |>
  distinct() |>
  rename(!!paste0("source_row_", coder2_name) := source_row_num)

# Create matrix with all excerpt-code combinations
df_matrix <- all_excerpt_codes

# Add source row numbers for each coder
df_matrix <- df_matrix |>
  left_join(coder1_source_rows, by = c("media_title", "excerpt_range")) |>
  left_join(coder2_source_rows, by = c("media_title", "excerpt_range"))

# Add coder 1's codes - properly join on BOTH excerpt_range AND code
coder1_codes <- df_split |>
  filter(excerpt_creator == coder1_name) |>
  select(media_title, excerpt_range, code) |>
  mutate(!!coder1_name := "present") |>
  distinct()

df_matrix <- df_matrix |>
  left_join(coder1_codes, by = c("media_title", "excerpt_range", "code"))

# Add coder 2's codes - properly join on BOTH excerpt_range AND code
coder2_codes <- df_split |>
  filter(excerpt_creator == coder2_name) |>
  select(media_title, excerpt_range, code) |>
  mutate(!!coder2_name := "present") |>
  distinct()

df_matrix <- df_matrix |>
  left_join(coder2_codes, by = c("media_title", "excerpt_range", "code"))

# Replace NAs with "missing" and calculate agreement
df_final <- df_matrix |>
  mutate(
    !!coder1_name := ifelse(is.na(!!sym(coder1_name)), "missing", "present"),
    !!coder2_name := ifelse(is.na(!!sym(coder2_name)), "missing", "present"),
    # Agreement means both coders made the same choice about this code
    agreement = (!!sym(coder1_name) == !!sym(coder2_name))
  ) |>
  # Reorder columns for clarity - now with separate source rows for each coder
  select(
    !!paste0("source_row_", coder1_name), 
    !!paste0("source_row_", coder2_name),
    media_title, 
    excerpt_range,
    code, 
    !!sym(coder1_name), 
    !!sym(coder2_name), 
    agreement, 
    excerpt_copy
  ) |>
  arrange(media_title, excerpt_range, code)

# Display sample of final structure
df_final |>
  select(-excerpt_copy) |>  # Hide long text for display
  head(15) |>
  knitr::kable(caption = "Final data structure (one row per excerpt-code)") |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover")) |>
  kableExtra::column_spec(8, background = ifelse(head(df_final$agreement, 15), "#d4f1d4", "#f1d4d4"))
```

## Step 4: Calculate Agreement Statistics

### Code Usage Analysis

```{r code-usage}
#| label: step4-code-usage

# Separate analysis for codes used by both vs one coder
code_usage <- df_final |>
  filter(code != "missing", !is.na(code), code != "NA", code != "na") |>
  group_by(code) |>
  summarise(
    times_both_used = sum(!!sym(coder1_name) == "present" & !!sym(coder2_name) == "present"),
    times_only_coder1 = sum(!!sym(coder1_name) == "present" & !!sym(coder2_name) == "missing"),
    times_only_coder2 = sum(!!sym(coder1_name) == "missing" & !!sym(coder2_name) == "present"),
    total_occurrences = n()
  ) |>
  mutate(
    # Agreement is always 100% when both used it (by our current definition)
    # This is because we're counting instances where both applied the same code
    agreement_when_both = ifelse(times_both_used > 0,
                                  paste0(times_both_used, "/", times_both_used, " (100%)"),
                                  "N/A"),
    usage_pattern = case_when(
      times_both_used > 0 & times_only_coder1 == 0 & times_only_coder2 == 0 ~ "Both coders always",
      times_both_used > 0 & (times_only_coder1 > 0 | times_only_coder2 > 0) ~ "Sometimes both, sometimes one",
      times_only_coder1 > 0 & times_only_coder2 == 0 ~ paste("Only", coder1_name),
      times_only_coder2 > 0 & times_only_coder1 == 0 ~ paste("Only", coder2_name),
      TRUE ~ "Unknown"
    )
  ) |>
  arrange(desc(times_both_used), desc(total_occurrences))

# Summary statistics
usage_summary <- code_usage |>
  summarise(
    codes_used_by_both = sum(times_both_used > 0),
    codes_only_coder1 = sum(times_only_coder1 > 0 & times_both_used == 0),
    codes_only_coder2 = sum(times_only_coder2 > 0 & times_both_used == 0),
    total_unique_codes = n()
  )

data.frame(
  Metric = c(
    "Total unique codes",
    paste("Codes used by both coders"),
    paste("Codes used only by", coder1_name),
    paste("Codes used only by", coder2_name)
  ),
  Count = c(
    usage_summary$total_unique_codes,
    usage_summary$codes_used_by_both,
    usage_summary$codes_only_coder1,
    usage_summary$codes_only_coder2
  )
) |>
  knitr::kable(caption = "Code Usage Overlap") |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
```

### Individual Code Usage Patterns

**Note:** The table below shows how often each code was used by each coder independently.

```{r code-patterns}
#| label: code-patterns

# Display detailed code usage patterns
# Create dynamic column names
col_names <- c("Code", "Both Used", 
               paste("Only", coder1_name), 
               paste("Only", coder2_name), 
               "Usage Pattern")

code_usage |>
  select(code, times_both_used, times_only_coder1, times_only_coder2, usage_pattern) |>
  setNames(col_names) |>
  knitr::kable(caption = "Code Usage Patterns") |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover")) |>
  kableExtra::scroll_box(width = "100%", height = "400px")
```

### Excerpt-Level Agreement

**Question:** Do coders agree on the complete set of codes for each excerpt?

```{r excerpt-agreement}
#| label: step4-excerpt-stats

# Calculate excerpt-level agreement on complete code sets
excerpt_agreement <- df_final |>
  group_by(media_title, excerpt_range) |>
  summarise(
    total_codes = n(),
    codes_agreed = sum(agreement, na.rm = TRUE),
    codes_disagreed = sum(!agreement, na.rm = TRUE),
    has_any_codes = sum(!!sym(coder1_name) == "present" | !!sym(coder2_name) == "present") > 0,
    .groups = "drop"
  ) |>
  mutate(
    agreement_type = case_when(
      !has_any_codes ~ "Not Reviewed by Either",
      codes_disagreed == 0 & codes_agreed > 0 ~ "Perfect Agreement (identical code sets)",
      codes_agreed > 0 & codes_disagreed > 0 ~ "Partial Agreement (some codes match)",
      codes_agreed == 0 & codes_disagreed > 0 ~ "No Agreement (no codes in common)",
      TRUE ~ "Unknown"
    )
  )

# Summary by agreement type
agreement_type_summary <- excerpt_agreement |>
  count(agreement_type) |>
  mutate(
    percent = round(n / sum(n) * 100, 2),
    description = paste0(n, "/", sum(n), " excerpts (", percent, "%)")
  ) |>
  arrange(desc(n))

agreement_type_summary |>
  select(`Agreement Type` = agreement_type, `Count` = description) |>
  knitr::kable(caption = "Agreement on Complete Code Sets per Excerpt") |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))

# Prepare examples for display
agreement_examples <- excerpt_agreement |>
  group_by(agreement_type) |>
  slice(1) |>
  ungroup() |>
  filter(!is.na(agreement_type))
```

### Agreement Pattern Examples

```{r agreement-examples}
#| label: agreement-examples

# Create a combined table showing one example of each type
example_tables <- list()

for (i in 1:nrow(agreement_examples)) {
  type <- agreement_examples$agreement_type[i]
  example_range <- agreement_examples$excerpt_range[i]
  
  example_data <- df_final |>
    filter(excerpt_range == example_range) |>
    select(excerpt_range, code, !!sym(coder1_name), !!sym(coder2_name), agreement) |>
    slice(1:3)  # Limit to first 3 codes for readability
  
  if (nrow(example_data) > 0) {
    # Add type as first column
    example_data <- example_data |>
      mutate(Type = gsub(" \\(.*\\)", "", type), .before = 1)
    example_tables[[type]] <- example_data
  }
}

# Combine all examples into one table
if (length(example_tables) > 0) {
  all_examples_df <- bind_rows(example_tables)
  
  all_examples_df |>
    knitr::kable(caption = "Examples of Each Agreement Pattern") |>
    kableExtra::kable_styling(bootstrap_options = c("striped", "hover")) |>
    kableExtra::pack_rows(index = table(all_examples_df$Type)) |>
    kableExtra::row_spec(which(all_examples_df$agreement), background = "#d4f1d4") |>
    kableExtra::row_spec(which(!all_examples_df$agreement), background = "#f1d4d4")
}
```

## Step 5: Analyze Disagreements

```{r disagreements}
#| label: step5-disagreements

# Find disagreements
disagreements <- df_final |>
  filter(!agreement) |>
  select(
    !!paste0("source_row_", coder1_name),
    !!paste0("source_row_", coder2_name),
    excerpt_range, 
    code, 
    !!sym(coder1_name), 
    !!sym(coder2_name), 
    excerpt_copy
  )

cat("Total disagreements:", nrow(disagreements), "\n\n")

# Most disputed codes
disputed_codes <- disagreements |>
  count(code) |>
  arrange(desc(n)) |>
  head(10)

if (nrow(disputed_codes) > 0) {
  disputed_codes |>
    knitr::kable(caption = "Most Frequently Disputed Codes") |>
    kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
}

# Sample of disagreements
if (nrow(disagreements) > 0) {
  disagreements |>
    select(-excerpt_copy) |>  # Remove long text for display
    head(10) |>
    knitr::kable(caption = "Sample Disagreements (First 10)") |>
    kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
}

# Pattern analysis: Codes one coder uses but the other doesn't
coder1_only <- df_final |>
  filter(!!sym(coder1_name) == "present", !!sym(coder2_name) == "missing") |>
  count(code) |>
  arrange(desc(n)) |>
  mutate(coder = coder1_name, pattern = "Used by this coder only")

coder2_only <- df_final |>
  filter(!!sym(coder1_name) == "missing", !!sym(coder2_name) == "present") |>
  count(code) |>
  arrange(desc(n)) |>
  mutate(coder = coder2_name, pattern = "Used by this coder only")

# Combine and display all unique codes
unique_codes_by_coder <- bind_rows(coder1_only, coder2_only) |>
  arrange(coder, desc(n))

unique_codes_by_coder |>
  knitr::kable(caption = "Codes Used by Only One Coder (Complete List)") |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover")) |>
  kableExtra::scroll_box(width = "100%", height = "300px")
```

## Export Results

```{r export}
#| label: export-data

# Create output directory
if (!dir.exists("output")) {
  dir.create("output")
}

# Generate filename without timestamp
output_csv <- "output/irr_analysis.csv"
output_xlsx <- "output/irr_analysis.xlsx"

# Save main analysis file
write.csv(df_final, output_csv, row.names = FALSE)
writexl::write_xlsx(df_final, output_xlsx)

# Display summary
data.frame(
  Metric = c(
    "Total rows in output",
    "Unique excerpts",
    "Unique codes",
    "Agreements",
    "Disagreements"
  ),
  Value = c(
    nrow(df_final),
    n_distinct(df_final$excerpt_range),
    n_distinct(df_final$code[df_final$code != "missing"]),
    sum(df_final$agreement),
    sum(!df_final$agreement)
  )
) |>
  knitr::kable(caption = "Output File Summary") |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))

# Display saved files info
files_saved <- data.frame(
  Format = c("CSV", "Excel"),
  Filename = c(output_csv, output_xlsx)
)

files_saved |>
  knitr::kable(caption = "Output Files Created") |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
```

## Summary Report

```{r summary}
#| label: summary-report
#| output: asis

# Get key statistics
total_excerpts <- n_distinct(df_final$excerpt_range)
# Get the actual COUNTS from the summary, not count of rows
perfect_agreement_count <- agreement_type_summary$n[agreement_type_summary$agreement_type == "Perfect Agreement (identical code sets)"]
partial_agreement_count <- agreement_type_summary$n[agreement_type_summary$agreement_type == "Partial Agreement (some codes match)"]
# Handle if not found
if(length(perfect_agreement_count) == 0) perfect_agreement_count <- 0
if(length(partial_agreement_count) == 0) partial_agreement_count <- 0
perfect_or_partial_count <- perfect_agreement_count + partial_agreement_count

# Create summary data
overall_summary <- data.frame(
  Metric = c(
    "Coders Compared",
    "Total Excerpts Analyzed", 
    "Total Unique Codes Used",
    "Codes Used by Both Coders",
    "Perfect Agreement on Code Sets",
    "Partial Agreement Only",
    "Perfect or Partial Agreement"
  ),
  Value = c(
    paste(coder1_name, "vs", coder2_name),
    total_excerpts,
    n_distinct(df_final$code[df_final$code != "missing"]),
    usage_summary$codes_used_by_both,
    paste0(perfect_agreement_count, "/", total_excerpts, 
           " excerpts (", round(perfect_agreement_count/total_excerpts*100, 1), "%)"),
    paste0(partial_agreement_count, "/", total_excerpts,
           " excerpts (", round(partial_agreement_count/total_excerpts*100, 1), "%)"),
    paste0(perfect_or_partial_count, "/", total_excerpts,
           " excerpts (", round(perfect_or_partial_count/total_excerpts*100, 1), "%)")
  )
)

overall_summary |>
  knitr::kable(caption = "Inter-Rater Reliability Summary") |>
  kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed")) |>
  kableExtra::column_spec(1, bold = TRUE)
```


## Session Information

```{r session}
#| label: session-info
sessionInfo()
```